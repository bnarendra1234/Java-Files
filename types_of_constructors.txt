1. Default Constructor
A default constructor is a constructor without any parameters.
If no constructor is defined in a class, the Java compiler automatically provides a default constructor.
It initializes the object with default values (e.g., 0 for numbers, null for objects).
Example:


class Example {
    int number;
    String text;

    // Default Constructor
    Example() {
        number = 0;
        text = "Default";
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        Example obj = new Example();
        obj.display();
    }
}
 

2. Parameterized Constructor
A parameterized constructor allows you to initialize an object with specific values.
It takes arguments that can be used to set instance variables.
Example:

 

class Example {
    int number;
    String text;

    // Parameterized Constructor
    Example(int num, String str) {
        number = num;
        text = str;
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        Example obj = new Example(42, "Hello");
        obj.display();
    }
}
 

3. Copy Constructor
A copy constructor initializes an object by copying the fields of another object of the same class.
Java does not provide a default copy constructor, but you can define one explicitly.
Example:

 

class Example {
    int number;
    String text;

    // Parameterized Constructor
    Example(int num, String str) {
        number = num;
        text = str;
    }

    // Copy Constructor
    Example(Example obj) {
        number = obj.number;
        text = obj.text;
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        Example obj1 = new Example(42, "Original");
        Example obj2 = new Example(obj1); // Using Copy Constructor
        obj2.display();
    }
}



Constructor Overloading
 

Like method overloading, constructors can have multiple forms with different parameters.
Example:

class Car {
    String model;
    Car() { model = "Default"; }               // Default constructor
    Car(String model) { this.model = model; }  // Parameterized constructor
}
Constructor Signature
Defined by its parameter list.
Does not include the return type because constructors do not have one.
Key Differences Between Methods and Constructors:
 

