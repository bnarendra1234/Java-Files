Garbage Collection in Java
 

 

Garbage collection in java is a process of destroying runtime unused objects.
 Garbage collectors destroy the objects automatically. A garbage collector's key goal is to allow effective use of memory.


Ways to make an object eligible for the garbage collector

 

There are primarily three ways to make an object eligible for garbage collection.

Nullifying the reference variable
Student obj = new Student();
obj = null;
 

By assigning a reference variable to another.
Student obj1 = new Student();
Student obj2 = new Student();
obj1 = obj2;
 

By anonymous object.
new Student();
 

 

Ways for requesting JVM to run garbage collector

 

There are two ways for requesting a JVM to run a garbage collector. 

Using System.gc() method.
Using Runtime.getRuntime().gc() method.
 

Example:

 

public class Test 
{ 
	public static void main(String[] args) throws ExceptionInterrupted 
	{ 
		Test t1 = new Test(); 
		Test t2 = new Test(); 
		
		// Nullifying the reference variable 
		t1 = null; 
		
		// requesting JVM for running Garbage Collector 
		System.gc(); 
		
		// Nullifying the reference variable 
		t2 = null; 
		
		// requesting JVM for running Garbage Collector 
		Runtime.getRuntime().gc(); 
	
	} 
	
	@Override
	// finalize method is called on object once 
	// before garbage collecting it 
	protected void finalize() throws Throwable 
	{ 
		System.out.println("Garbage collector called"); 
		System.out.println("Object garbage collected : " + this); 
	} 
} 
 

Output:

 

Garbage collector called
Object garbage collected : Test@6fe026ef
Garbage collector called
Object garbage collected : Test@6127c563